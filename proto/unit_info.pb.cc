// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "unit_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

namespace {

const ::google::protobuf::Descriptor* unit_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unit_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_unit_5finfo_2eproto() {
  protobuf_AddDesc_unit_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "unit_info.proto");
  GOOGLE_CHECK(file != NULL);
  unit_info_descriptor_ = file->message_type(0);
  static const int unit_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, planid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, unitbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, exactnegative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, cdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, udate_),
  };
  unit_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unit_info_descriptor_,
      unit_info::default_instance_,
      unit_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unit_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unit_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_unit_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unit_info_descriptor_, &unit_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_unit_5finfo_2eproto() {
  delete unit_info::default_instance_;
  delete unit_info_reflection_;
}

void protobuf_AddDesc_unit_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xbuiltin::protobuf_AddDesc_xbuiltin_2doptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017unit_info.proto\022\006ad.rtb\032\026xbuiltin-opti"
    "ons.proto\"\273\001\n\tunit_info\022\r\n\005level\030\001 \001(\004\022\016"
    "\n\006unitid\030\002 \002(\004\022\016\n\006planid\030\003 \002(\004\022\016\n\006userid"
    "\030\004 \002(\004\022\017\n\007unitbid\030\005 \002(\004\022\020\n\010negative\030\006 \001("
    "\014\022\025\n\rexactnegative\030\007 \001(\014\022\014\n\004name\030\010 \002(\014\022\r"
    "\n\005cdate\030\t \002(\014\022\r\n\005udate\030\n \002(\014:\t\322>\006unitid", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "unit_info.proto", &protobuf_RegisterTypes);
  unit_info::default_instance_ = new unit_info();
  unit_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_unit_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_unit_5finfo_2eproto {
  StaticDescriptorInitializer_unit_5finfo_2eproto() {
    protobuf_AddDesc_unit_5finfo_2eproto();
  }
} static_descriptor_initializer_unit_5finfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int unit_info::kLevelFieldNumber;
const int unit_info::kUnitidFieldNumber;
const int unit_info::kPlanidFieldNumber;
const int unit_info::kUseridFieldNumber;
const int unit_info::kUnitbidFieldNumber;
const int unit_info::kNegativeFieldNumber;
const int unit_info::kExactnegativeFieldNumber;
const int unit_info::kNameFieldNumber;
const int unit_info::kCdateFieldNumber;
const int unit_info::kUdateFieldNumber;
#endif  // !_MSC_VER

unit_info::unit_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unit_info::InitAsDefaultInstance() {
}

unit_info::unit_info(const unit_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unit_info::SharedCtor() {
  _cached_size_ = 0;
  level_ = GOOGLE_ULONGLONG(0);
  unitid_ = GOOGLE_ULONGLONG(0);
  planid_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  unitbid_ = GOOGLE_ULONGLONG(0);
  negative_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exactnegative_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unit_info::~unit_info() {
  SharedDtor();
}

void unit_info::SharedDtor() {
  if (negative_ != &::google::protobuf::internal::kEmptyString) {
    delete negative_;
  }
  if (exactnegative_ != &::google::protobuf::internal::kEmptyString) {
    delete exactnegative_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cdate_ != &::google::protobuf::internal::kEmptyString) {
    delete cdate_;
  }
  if (udate_ != &::google::protobuf::internal::kEmptyString) {
    delete udate_;
  }
  if (this != default_instance_) {
  }
}

void unit_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unit_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unit_info_descriptor_;
}

const unit_info& unit_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unit_5finfo_2eproto();  return *default_instance_;
}

unit_info* unit_info::default_instance_ = NULL;

unit_info* unit_info::New() const {
  return new unit_info;
}

void unit_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = GOOGLE_ULONGLONG(0);
    unitid_ = GOOGLE_ULONGLONG(0);
    planid_ = GOOGLE_ULONGLONG(0);
    userid_ = GOOGLE_ULONGLONG(0);
    unitbid_ = GOOGLE_ULONGLONG(0);
    if (has_negative()) {
      if (negative_ != &::google::protobuf::internal::kEmptyString) {
        negative_->clear();
      }
    }
    if (has_exactnegative()) {
      if (exactnegative_ != &::google::protobuf::internal::kEmptyString) {
        exactnegative_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cdate()) {
      if (cdate_ != &::google::protobuf::internal::kEmptyString) {
        cdate_->clear();
      }
    }
    if (has_udate()) {
      if (udate_ != &::google::protobuf::internal::kEmptyString) {
        udate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unit_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unitid;
        break;
      }
      
      // required uint64 unitid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unitid_)));
          set_has_unitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_planid;
        break;
      }
      
      // required uint64 planid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &planid_)));
          set_has_planid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unitbid;
        break;
      }
      
      // required uint64 unitbid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unitbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unitbid_)));
          set_has_unitbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_negative;
        break;
      }
      
      // optional bytes negative = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_negative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_negative()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_exactnegative;
        break;
      }
      
      // optional bytes exactnegative = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exactnegative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exactnegative()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }
      
      // required bytes name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cdate;
        break;
      }
      
      // required bytes cdate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_udate;
        break;
      }
      
      // required bytes udate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_udate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unit_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->level(), output);
  }
  
  // required uint64 unitid = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unitid(), output);
  }
  
  // required uint64 planid = 3;
  if (has_planid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->planid(), output);
  }
  
  // required uint64 userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }
  
  // required uint64 unitbid = 5;
  if (has_unitbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->unitbid(), output);
  }
  
  // optional bytes negative = 6;
  if (has_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->negative(), output);
  }
  
  // optional bytes exactnegative = 7;
  if (has_exactnegative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->exactnegative(), output);
  }
  
  // required bytes name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->name(), output);
  }
  
  // required bytes cdate = 9;
  if (has_cdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->cdate(), output);
  }
  
  // required bytes udate = 10;
  if (has_udate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->udate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unit_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->level(), target);
  }
  
  // required uint64 unitid = 2;
  if (has_unitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unitid(), target);
  }
  
  // required uint64 planid = 3;
  if (has_planid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->planid(), target);
  }
  
  // required uint64 userid = 4;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }
  
  // required uint64 unitbid = 5;
  if (has_unitbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->unitbid(), target);
  }
  
  // optional bytes negative = 6;
  if (has_negative()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->negative(), target);
  }
  
  // optional bytes exactnegative = 7;
  if (has_exactnegative()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->exactnegative(), target);
  }
  
  // required bytes name = 8;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->name(), target);
  }
  
  // required bytes cdate = 9;
  if (has_cdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->cdate(), target);
  }
  
  // required bytes udate = 10;
  if (has_udate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->udate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unit_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->level());
    }
    
    // required uint64 unitid = 2;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unitid());
    }
    
    // required uint64 planid = 3;
    if (has_planid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->planid());
    }
    
    // required uint64 userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint64 unitbid = 5;
    if (has_unitbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unitbid());
    }
    
    // optional bytes negative = 6;
    if (has_negative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->negative());
    }
    
    // optional bytes exactnegative = 7;
    if (has_exactnegative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->exactnegative());
    }
    
    // required bytes name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes cdate = 9;
    if (has_cdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cdate());
    }
    
    // required bytes udate = 10;
    if (has_udate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->udate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unit_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unit_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unit_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unit_info::MergeFrom(const unit_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_planid()) {
      set_planid(from.planid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_unitbid()) {
      set_unitbid(from.unitbid());
    }
    if (from.has_negative()) {
      set_negative(from.negative());
    }
    if (from.has_exactnegative()) {
      set_exactnegative(from.exactnegative());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cdate()) {
      set_cdate(from.cdate());
    }
    if (from.has_udate()) {
      set_udate(from.udate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unit_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unit_info::CopyFrom(const unit_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unit_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000039e) != 0x0000039e) return false;
  
  return true;
}

void unit_info::Swap(unit_info* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(unitid_, other->unitid_);
    std::swap(planid_, other->planid_);
    std::swap(userid_, other->userid_);
    std::swap(unitbid_, other->unitbid_);
    std::swap(negative_, other->negative_);
    std::swap(exactnegative_, other->exactnegative_);
    std::swap(name_, other->name_);
    std::swap(cdate_, other->cdate_);
    std::swap(udate_, other->udate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unit_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unit_info_descriptor_;
  metadata.reflection = unit_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

// @@protoc_insertion_point(global_scope)
