// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business_ad.proto

#ifndef PROTOBUF_business_5fad_2eproto__INCLUDED
#define PROTOBUF_business_5fad_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "xbuiltin-options.pb.h"
#include <xbuiltin/Utils.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_business_5fad_2eproto();
void protobuf_AssignDesc_business_5fad_2eproto();
void protobuf_ShutdownFile_business_5fad_2eproto();

class business_ad;

// ===================================================================

class business_ad : public ::google::protobuf::Message {
 public:
  business_ad();
  virtual ~business_ad();
  
  business_ad(const business_ad& from);
  
  inline business_ad& operator=(const business_ad& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const business_ad& default_instance();
  
  void Swap(business_ad* other);
  
  // implements Message ----------------------------------------------
  
  business_ad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const business_ad& from);
  void MergeFrom(const business_ad& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes business = 1;
  inline bool has_business() const;
  inline void clear_business();
  static const int kBusinessFieldNumber = 1;
  inline const ::std::string& business() const;
  inline void set_business(const ::std::string& value);
  inline void set_business(const char* value);
  inline void set_business(const void* value, size_t size);
  inline ::std::string* mutable_business();
  inline ::std::string* release_business();
  
  // repeated uint64 unitid = 2;
  inline int unitid_size() const;
  inline void clear_unitid();
  static const int kUnitidFieldNumber = 2;
  inline ::google::protobuf::uint64 unitid(int index) const;
  inline void set_unitid(int index, ::google::protobuf::uint64 value);
  inline void add_unitid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      unitid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_unitid();
  
  // repeated uint64 bid = 3;
  inline int bid_size() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 3;
  inline ::google::protobuf::uint64 bid(int index) const;
  inline void set_bid(int index, ::google::protobuf::uint64 value);
  inline void add_bid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bid();
  
  static inline int generate_keysign(const char * xdict_business, uint64_t *output) {
    char buffer[16*1024]; // 16K
    int ret = snprintf(buffer, sizeof(buffer), "%s", xdict_business);
    if (ret < 0 || ret >= (int)sizeof(buffer)) {
      return -1;
    }
    if (::xbuiltin::make_sign64(buffer, strlen(buffer), output) < 0) {
      return -1;
    }
    return 0;
  }
  int generate_keysign(uint64_t *output) {
    return generate_keysign(business().c_str(), output);
  }
  void clear_optionals() {
  }
  int load_tsl(char *&str) {
    // business
    char * xdict_business_value;
    if (::xbuiltin::xconvert(str, &xdict_business_value) < 0) {
      return -1;
    }
    set_business(xdict_business_value);
    // unitid
    uint64_t xdict_unitid_value;
    bool unitid_has_bracket = false;
    if (str && *str == '[') {
      if (*(str+1) != '\t') {
        return -1;
      }
      unitid_has_bracket = true;
      ::xbuiltin::skip_separator(str, str+1);
    }
    if (!unitid_has_bracket) {
      return -1;
    }
    while (str && !(*str == ']' && ::xbuiltin::valid_separator(*(str+1)))) {
      if (::xbuiltin::xconvert(str, &xdict_unitid_value) < 0) {
        return -1;
      }
      add_unitid(xdict_unitid_value);
    }
    if (unitid_has_bracket) {
      if (str == NULL || !(*str == ']' && ::xbuiltin::valid_separator(*(str+1)))) {
        return -1;
      } else {
        ::xbuiltin::skip_separator(str, str+1);
      }
    }
    // bid
    uint64_t xdict_bid_value;
    bool bid_has_bracket = false;
    if (str && *str == '[') {
      if (*(str+1) != '\t') {
        return -1;
      }
      bid_has_bracket = true;
      ::xbuiltin::skip_separator(str, str+1);
    }
    while (str && !(*str == ']' && ::xbuiltin::valid_separator(*(str+1)))) {
      if (::xbuiltin::xconvert(str, &xdict_bid_value) < 0) {
        return -1;
      }
      add_bid(xdict_bid_value);
    }
    if (bid_has_bracket) {
      if (str == NULL || !(*str == ']' && ::xbuiltin::valid_separator(*(str+1)))) {
        return -1;
      } else {
        ::xbuiltin::skip_separator(str, str+1);
      }
    }
    return 0;
  }
  // @@protoc_insertion_point(class_scope:ad.rtb.business_ad)
 private:
  inline void set_has_business();
  inline void clear_has_business();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* business_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > unitid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_business_5fad_2eproto();
  friend void protobuf_AssignDesc_business_5fad_2eproto();
  friend void protobuf_ShutdownFile_business_5fad_2eproto();
  
  void InitAsDefaultInstance();
  static business_ad* default_instance_;
};
// ===================================================================


// ===================================================================

// business_ad

// required bytes business = 1;
inline bool business_ad::has_business() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void business_ad::set_has_business() {
  _has_bits_[0] |= 0x00000001u;
}
inline void business_ad::clear_has_business() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void business_ad::clear_business() {
  if (business_ != &::google::protobuf::internal::kEmptyString) {
    business_->clear();
  }
  clear_has_business();
}
inline const ::std::string& business_ad::business() const {
  return *business_;
}
inline void business_ad::set_business(const ::std::string& value) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    business_ = new ::std::string;
  }
  business_->assign(value);
}
inline void business_ad::set_business(const char* value) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    business_ = new ::std::string;
  }
  business_->assign(value);
}
inline void business_ad::set_business(const void* value, size_t size) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    business_ = new ::std::string;
  }
  business_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* business_ad::mutable_business() {
  set_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    business_ = new ::std::string;
  }
  return business_;
}
inline ::std::string* business_ad::release_business() {
  clear_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = business_;
    business_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated uint64 unitid = 2;
inline int business_ad::unitid_size() const {
  return unitid_.size();
}
inline void business_ad::clear_unitid() {
  unitid_.Clear();
}
inline ::google::protobuf::uint64 business_ad::unitid(int index) const {
  return unitid_.Get(index);
}
inline void business_ad::set_unitid(int index, ::google::protobuf::uint64 value) {
  unitid_.Set(index, value);
}
inline void business_ad::add_unitid(::google::protobuf::uint64 value) {
  unitid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
business_ad::unitid() const {
  return unitid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
business_ad::mutable_unitid() {
  return &unitid_;
}

// repeated uint64 bid = 3;
inline int business_ad::bid_size() const {
  return bid_.size();
}
inline void business_ad::clear_bid() {
  bid_.Clear();
}
inline ::google::protobuf::uint64 business_ad::bid(int index) const {
  return bid_.Get(index);
}
inline void business_ad::set_bid(int index, ::google::protobuf::uint64 value) {
  bid_.Set(index, value);
}
inline void business_ad::add_bid(::google::protobuf::uint64 value) {
  bid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
business_ad::bid() const {
  return bid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
business_ad::mutable_bid() {
  return &bid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_5fad_2eproto__INCLUDED
