// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "plan_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

namespace {

const ::google::protobuf::Descriptor* plan_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plan_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_plan_5finfo_2eproto() {
  protobuf_AddDesc_plan_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "plan_info.proto");
  GOOGLE_CHECK(file != NULL);
  plan_info_descriptor_ = file->message_type(0);
  static const int plan_info_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, planid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, planstatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, ipblack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, cyc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, budget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, taste_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, sitecate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, exactnegative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, flowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, cdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, udate_),
  };
  plan_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plan_info_descriptor_,
      plan_info::default_instance_,
      plan_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plan_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plan_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_plan_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plan_info_descriptor_, &plan_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_plan_5finfo_2eproto() {
  delete plan_info::default_instance_;
  delete plan_info_reflection_;
}

void protobuf_AddDesc_plan_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xbuiltin::protobuf_AddDesc_xbuiltin_2doptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017plan_info.proto\022\006ad.rtb\032\026xbuiltin-opti"
    "ons.proto\"\300\002\n\tplan_info\022\r\n\005level\030\001 \001(\004\022\016"
    "\n\006planid\030\002 \002(\004\022\016\n\006userid\030\003 \002(\004\022\022\n\nplanst"
    "atid\030\004 \002(\004\022\017\n\007ipblack\030\005 \001(\014\022\020\n\010negative\030"
    "\006 \001(\014\022\013\n\003cyc\030\007 \001(\014\022\016\n\006region\030\010 \001(\014\022\016\n\006bu"
    "dget\030\t \001(\004\022\017\n\007consume\030\n \001(\004\022\016\n\006gender\030\013 "
    "\001(\004\022\r\n\005taste\030\014 \002(\014\022\020\n\010sitecate\030\r \002(\014\022\025\n\r"
    "exactnegative\030\016 \002(\014\022\020\n\010flowtype\030\017 \002(\014\022\014\n"
    "\004name\030\020 \002(\014\022\r\n\005cdate\030\021 \002(\014\022\r\n\005udate\030\022 \002("
    "\014:\t\322>\006planid", 372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plan_info.proto", &protobuf_RegisterTypes);
  plan_info::default_instance_ = new plan_info();
  plan_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_plan_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_plan_5finfo_2eproto {
  StaticDescriptorInitializer_plan_5finfo_2eproto() {
    protobuf_AddDesc_plan_5finfo_2eproto();
  }
} static_descriptor_initializer_plan_5finfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int plan_info::kLevelFieldNumber;
const int plan_info::kPlanidFieldNumber;
const int plan_info::kUseridFieldNumber;
const int plan_info::kPlanstatidFieldNumber;
const int plan_info::kIpblackFieldNumber;
const int plan_info::kNegativeFieldNumber;
const int plan_info::kCycFieldNumber;
const int plan_info::kRegionFieldNumber;
const int plan_info::kBudgetFieldNumber;
const int plan_info::kConsumeFieldNumber;
const int plan_info::kGenderFieldNumber;
const int plan_info::kTasteFieldNumber;
const int plan_info::kSitecateFieldNumber;
const int plan_info::kExactnegativeFieldNumber;
const int plan_info::kFlowtypeFieldNumber;
const int plan_info::kNameFieldNumber;
const int plan_info::kCdateFieldNumber;
const int plan_info::kUdateFieldNumber;
#endif  // !_MSC_VER

plan_info::plan_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plan_info::InitAsDefaultInstance() {
}

plan_info::plan_info(const plan_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plan_info::SharedCtor() {
  _cached_size_ = 0;
  level_ = GOOGLE_ULONGLONG(0);
  planid_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  planstatid_ = GOOGLE_ULONGLONG(0);
  ipblack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  negative_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cyc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  budget_ = GOOGLE_ULONGLONG(0);
  consume_ = GOOGLE_ULONGLONG(0);
  gender_ = GOOGLE_ULONGLONG(0);
  taste_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sitecate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exactnegative_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flowtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plan_info::~plan_info() {
  SharedDtor();
}

void plan_info::SharedDtor() {
  if (ipblack_ != &::google::protobuf::internal::kEmptyString) {
    delete ipblack_;
  }
  if (negative_ != &::google::protobuf::internal::kEmptyString) {
    delete negative_;
  }
  if (cyc_ != &::google::protobuf::internal::kEmptyString) {
    delete cyc_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (taste_ != &::google::protobuf::internal::kEmptyString) {
    delete taste_;
  }
  if (sitecate_ != &::google::protobuf::internal::kEmptyString) {
    delete sitecate_;
  }
  if (exactnegative_ != &::google::protobuf::internal::kEmptyString) {
    delete exactnegative_;
  }
  if (flowtype_ != &::google::protobuf::internal::kEmptyString) {
    delete flowtype_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cdate_ != &::google::protobuf::internal::kEmptyString) {
    delete cdate_;
  }
  if (udate_ != &::google::protobuf::internal::kEmptyString) {
    delete udate_;
  }
  if (this != default_instance_) {
  }
}

void plan_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plan_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plan_info_descriptor_;
}

const plan_info& plan_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_plan_5finfo_2eproto();  return *default_instance_;
}

plan_info* plan_info::default_instance_ = NULL;

plan_info* plan_info::New() const {
  return new plan_info;
}

void plan_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = GOOGLE_ULONGLONG(0);
    planid_ = GOOGLE_ULONGLONG(0);
    userid_ = GOOGLE_ULONGLONG(0);
    planstatid_ = GOOGLE_ULONGLONG(0);
    if (has_ipblack()) {
      if (ipblack_ != &::google::protobuf::internal::kEmptyString) {
        ipblack_->clear();
      }
    }
    if (has_negative()) {
      if (negative_ != &::google::protobuf::internal::kEmptyString) {
        negative_->clear();
      }
    }
    if (has_cyc()) {
      if (cyc_ != &::google::protobuf::internal::kEmptyString) {
        cyc_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    budget_ = GOOGLE_ULONGLONG(0);
    consume_ = GOOGLE_ULONGLONG(0);
    gender_ = GOOGLE_ULONGLONG(0);
    if (has_taste()) {
      if (taste_ != &::google::protobuf::internal::kEmptyString) {
        taste_->clear();
      }
    }
    if (has_sitecate()) {
      if (sitecate_ != &::google::protobuf::internal::kEmptyString) {
        sitecate_->clear();
      }
    }
    if (has_exactnegative()) {
      if (exactnegative_ != &::google::protobuf::internal::kEmptyString) {
        exactnegative_->clear();
      }
    }
    if (has_flowtype()) {
      if (flowtype_ != &::google::protobuf::internal::kEmptyString) {
        flowtype_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_cdate()) {
      if (cdate_ != &::google::protobuf::internal::kEmptyString) {
        cdate_->clear();
      }
    }
    if (has_udate()) {
      if (udate_ != &::google::protobuf::internal::kEmptyString) {
        udate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plan_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_planid;
        break;
      }
      
      // required uint64 planid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &planid_)));
          set_has_planid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_planstatid;
        break;
      }
      
      // required uint64 planstatid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planstatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &planstatid_)));
          set_has_planstatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ipblack;
        break;
      }
      
      // optional bytes ipblack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipblack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipblack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_negative;
        break;
      }
      
      // optional bytes negative = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_negative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_negative()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cyc;
        break;
      }
      
      // optional bytes cyc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cyc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cyc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_region;
        break;
      }
      
      // optional bytes region = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_budget;
        break;
      }
      
      // optional uint64 budget = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_budget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &budget_)));
          set_has_budget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_consume;
        break;
      }
      
      // optional uint64 consume = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gender;
        break;
      }
      
      // optional uint64 gender = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_taste;
        break;
      }
      
      // required bytes taste = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taste:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taste()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sitecate;
        break;
      }
      
      // required bytes sitecate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sitecate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sitecate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_exactnegative;
        break;
      }
      
      // required bytes exactnegative = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exactnegative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exactnegative()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_flowtype;
        break;
      }
      
      // required bytes flowtype = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flowtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_flowtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_name;
        break;
      }
      
      // required bytes name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_cdate;
        break;
      }
      
      // required bytes cdate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_udate;
        break;
      }
      
      // required bytes udate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_udate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plan_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->level(), output);
  }
  
  // required uint64 planid = 2;
  if (has_planid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->planid(), output);
  }
  
  // required uint64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }
  
  // required uint64 planstatid = 4;
  if (has_planstatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->planstatid(), output);
  }
  
  // optional bytes ipblack = 5;
  if (has_ipblack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->ipblack(), output);
  }
  
  // optional bytes negative = 6;
  if (has_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->negative(), output);
  }
  
  // optional bytes cyc = 7;
  if (has_cyc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->cyc(), output);
  }
  
  // optional bytes region = 8;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->region(), output);
  }
  
  // optional uint64 budget = 9;
  if (has_budget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->budget(), output);
  }
  
  // optional uint64 consume = 10;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->consume(), output);
  }
  
  // optional uint64 gender = 11;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->gender(), output);
  }
  
  // required bytes taste = 12;
  if (has_taste()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->taste(), output);
  }
  
  // required bytes sitecate = 13;
  if (has_sitecate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->sitecate(), output);
  }
  
  // required bytes exactnegative = 14;
  if (has_exactnegative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->exactnegative(), output);
  }
  
  // required bytes flowtype = 15;
  if (has_flowtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->flowtype(), output);
  }
  
  // required bytes name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->name(), output);
  }
  
  // required bytes cdate = 17;
  if (has_cdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->cdate(), output);
  }
  
  // required bytes udate = 18;
  if (has_udate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->udate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plan_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->level(), target);
  }
  
  // required uint64 planid = 2;
  if (has_planid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->planid(), target);
  }
  
  // required uint64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }
  
  // required uint64 planstatid = 4;
  if (has_planstatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->planstatid(), target);
  }
  
  // optional bytes ipblack = 5;
  if (has_ipblack()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ipblack(), target);
  }
  
  // optional bytes negative = 6;
  if (has_negative()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->negative(), target);
  }
  
  // optional bytes cyc = 7;
  if (has_cyc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->cyc(), target);
  }
  
  // optional bytes region = 8;
  if (has_region()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->region(), target);
  }
  
  // optional uint64 budget = 9;
  if (has_budget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->budget(), target);
  }
  
  // optional uint64 consume = 10;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->consume(), target);
  }
  
  // optional uint64 gender = 11;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->gender(), target);
  }
  
  // required bytes taste = 12;
  if (has_taste()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->taste(), target);
  }
  
  // required bytes sitecate = 13;
  if (has_sitecate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->sitecate(), target);
  }
  
  // required bytes exactnegative = 14;
  if (has_exactnegative()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->exactnegative(), target);
  }
  
  // required bytes flowtype = 15;
  if (has_flowtype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->flowtype(), target);
  }
  
  // required bytes name = 16;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->name(), target);
  }
  
  // required bytes cdate = 17;
  if (has_cdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->cdate(), target);
  }
  
  // required bytes udate = 18;
  if (has_udate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->udate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plan_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->level());
    }
    
    // required uint64 planid = 2;
    if (has_planid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->planid());
    }
    
    // required uint64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint64 planstatid = 4;
    if (has_planstatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->planstatid());
    }
    
    // optional bytes ipblack = 5;
    if (has_ipblack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipblack());
    }
    
    // optional bytes negative = 6;
    if (has_negative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->negative());
    }
    
    // optional bytes cyc = 7;
    if (has_cyc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cyc());
    }
    
    // optional bytes region = 8;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->region());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 budget = 9;
    if (has_budget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->budget());
    }
    
    // optional uint64 consume = 10;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->consume());
    }
    
    // optional uint64 gender = 11;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gender());
    }
    
    // required bytes taste = 12;
    if (has_taste()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->taste());
    }
    
    // required bytes sitecate = 13;
    if (has_sitecate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sitecate());
    }
    
    // required bytes exactnegative = 14;
    if (has_exactnegative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->exactnegative());
    }
    
    // required bytes flowtype = 15;
    if (has_flowtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->flowtype());
    }
    
    // required bytes name = 16;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bytes cdate = 17;
    if (has_cdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cdate());
    }
    
    // required bytes udate = 18;
    if (has_udate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->udate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plan_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plan_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plan_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plan_info::MergeFrom(const plan_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_planid()) {
      set_planid(from.planid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_planstatid()) {
      set_planstatid(from.planstatid());
    }
    if (from.has_ipblack()) {
      set_ipblack(from.ipblack());
    }
    if (from.has_negative()) {
      set_negative(from.negative());
    }
    if (from.has_cyc()) {
      set_cyc(from.cyc());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_budget()) {
      set_budget(from.budget());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_taste()) {
      set_taste(from.taste());
    }
    if (from.has_sitecate()) {
      set_sitecate(from.sitecate());
    }
    if (from.has_exactnegative()) {
      set_exactnegative(from.exactnegative());
    }
    if (from.has_flowtype()) {
      set_flowtype(from.flowtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cdate()) {
      set_cdate(from.cdate());
    }
    if (from.has_udate()) {
      set_udate(from.udate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plan_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plan_info::CopyFrom(const plan_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plan_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003f80e) != 0x0003f80e) return false;
  
  return true;
}

void plan_info::Swap(plan_info* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(planid_, other->planid_);
    std::swap(userid_, other->userid_);
    std::swap(planstatid_, other->planstatid_);
    std::swap(ipblack_, other->ipblack_);
    std::swap(negative_, other->negative_);
    std::swap(cyc_, other->cyc_);
    std::swap(region_, other->region_);
    std::swap(budget_, other->budget_);
    std::swap(consume_, other->consume_);
    std::swap(gender_, other->gender_);
    std::swap(taste_, other->taste_);
    std::swap(sitecate_, other->sitecate_);
    std::swap(exactnegative_, other->exactnegative_);
    std::swap(flowtype_, other->flowtype_);
    std::swap(name_, other->name_);
    std::swap(cdate_, other->cdate_);
    std::swap(udate_, other->udate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plan_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plan_info_descriptor_;
  metadata.reflection = plan_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

// @@protoc_insertion_point(global_scope)
