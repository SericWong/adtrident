// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phrase_business.proto

#ifndef PROTOBUF_phrase_5fbusiness_2eproto__INCLUDED
#define PROTOBUF_phrase_5fbusiness_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "xbuiltin-options.pb.h"
#include <xbuiltin/Utils.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_phrase_5fbusiness_2eproto();
void protobuf_AssignDesc_phrase_5fbusiness_2eproto();
void protobuf_ShutdownFile_phrase_5fbusiness_2eproto();

class phrase_business;

// ===================================================================

class phrase_business : public ::google::protobuf::Message {
 public:
  phrase_business();
  virtual ~phrase_business();
  
  phrase_business(const phrase_business& from);
  
  inline phrase_business& operator=(const phrase_business& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const phrase_business& default_instance();
  
  void Swap(phrase_business* other);
  
  // implements Message ----------------------------------------------
  
  phrase_business* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phrase_business& from);
  void MergeFrom(const phrase_business& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes phrase = 1;
  inline bool has_phrase() const;
  inline void clear_phrase();
  static const int kPhraseFieldNumber = 1;
  inline const ::std::string& phrase() const;
  inline void set_phrase(const ::std::string& value);
  inline void set_phrase(const char* value);
  inline void set_phrase(const void* value, size_t size);
  inline ::std::string* mutable_phrase();
  inline ::std::string* release_phrase();
  
  // required bytes business = 2;
  inline bool has_business() const;
  inline void clear_business();
  static const int kBusinessFieldNumber = 2;
  inline const ::std::string& business() const;
  inline void set_business(const ::std::string& value);
  inline void set_business(const char* value);
  inline void set_business(const void* value, size_t size);
  inline ::std::string* mutable_business();
  inline ::std::string* release_business();
  
  // required float weight = 3;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 3;
  inline float weight() const;
  inline void set_weight(float value);
  
  static inline int generate_keysign(const char * xdict_phrase, uint64_t *output) {
    char buffer[16*1024]; // 16K
    int ret = snprintf(buffer, sizeof(buffer), "%s", xdict_phrase);
    if (ret < 0 || ret >= (int)sizeof(buffer)) {
      return -1;
    }
    if (::xbuiltin::make_sign64(buffer, strlen(buffer), output) < 0) {
      return -1;
    }
    return 0;
  }
  int generate_keysign(uint64_t *output) {
    return generate_keysign(phrase().c_str(), output);
  }
  void clear_optionals() {
  }
  int load_tsl(char *&str) {
    // phrase
    char * xdict_phrase_value;
    if (::xbuiltin::xconvert(str, &xdict_phrase_value) < 0) {
      return -1;
    }
    set_phrase(xdict_phrase_value);
    // business
    char * xdict_business_value;
    if (::xbuiltin::xconvert(str, &xdict_business_value) < 0) {
      return -1;
    }
    set_business(xdict_business_value);
    // weight
    float xdict_weight_value;
    if (::xbuiltin::xconvert(str, &xdict_weight_value) < 0) {
      return -1;
    }
    set_weight(xdict_weight_value);
    return 0;
  }
  // @@protoc_insertion_point(class_scope:ad.rtb.phrase_business)
 private:
  inline void set_has_phrase();
  inline void clear_has_phrase();
  inline void set_has_business();
  inline void clear_has_business();
  inline void set_has_weight();
  inline void clear_has_weight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* phrase_;
  ::std::string* business_;
  float weight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_phrase_5fbusiness_2eproto();
  friend void protobuf_AssignDesc_phrase_5fbusiness_2eproto();
  friend void protobuf_ShutdownFile_phrase_5fbusiness_2eproto();
  
  void InitAsDefaultInstance();
  static phrase_business* default_instance_;
};
// ===================================================================


// ===================================================================

// phrase_business

// required bytes phrase = 1;
inline bool phrase_business::has_phrase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phrase_business::set_has_phrase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phrase_business::clear_has_phrase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phrase_business::clear_phrase() {
  if (phrase_ != &::google::protobuf::internal::kEmptyString) {
    phrase_->clear();
  }
  clear_has_phrase();
}
inline const ::std::string& phrase_business::phrase() const {
  return *phrase_;
}
inline void phrase_business::set_phrase(const ::std::string& value) {
  set_has_phrase();
  if (phrase_ == &::google::protobuf::internal::kEmptyString) {
    phrase_ = new ::std::string;
  }
  phrase_->assign(value);
}
inline void phrase_business::set_phrase(const char* value) {
  set_has_phrase();
  if (phrase_ == &::google::protobuf::internal::kEmptyString) {
    phrase_ = new ::std::string;
  }
  phrase_->assign(value);
}
inline void phrase_business::set_phrase(const void* value, size_t size) {
  set_has_phrase();
  if (phrase_ == &::google::protobuf::internal::kEmptyString) {
    phrase_ = new ::std::string;
  }
  phrase_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phrase_business::mutable_phrase() {
  set_has_phrase();
  if (phrase_ == &::google::protobuf::internal::kEmptyString) {
    phrase_ = new ::std::string;
  }
  return phrase_;
}
inline ::std::string* phrase_business::release_phrase() {
  clear_has_phrase();
  if (phrase_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phrase_;
    phrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes business = 2;
inline bool phrase_business::has_business() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phrase_business::set_has_business() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phrase_business::clear_has_business() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phrase_business::clear_business() {
  if (business_ != &::google::protobuf::internal::kEmptyString) {
    business_->clear();
  }
  clear_has_business();
}
inline const ::std::string& phrase_business::business() const {
  return *business_;
}
inline void phrase_business::set_business(const ::std::string& value) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    business_ = new ::std::string;
  }
  business_->assign(value);
}
inline void phrase_business::set_business(const char* value) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    business_ = new ::std::string;
  }
  business_->assign(value);
}
inline void phrase_business::set_business(const void* value, size_t size) {
  set_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    business_ = new ::std::string;
  }
  business_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phrase_business::mutable_business() {
  set_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    business_ = new ::std::string;
  }
  return business_;
}
inline ::std::string* phrase_business::release_business() {
  clear_has_business();
  if (business_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = business_;
    business_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float weight = 3;
inline bool phrase_business::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void phrase_business::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void phrase_business::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void phrase_business::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float phrase_business::weight() const {
  return weight_;
}
inline void phrase_business::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_phrase_5fbusiness_2eproto__INCLUDED
