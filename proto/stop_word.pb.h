// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stop_word.proto

#ifndef PROTOBUF_stop_5fword_2eproto__INCLUDED
#define PROTOBUF_stop_5fword_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "xbuiltin-options.pb.h"
#include <xbuiltin/Utils.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_stop_5fword_2eproto();
void protobuf_AssignDesc_stop_5fword_2eproto();
void protobuf_ShutdownFile_stop_5fword_2eproto();

class stop_word;

// ===================================================================

class stop_word : public ::google::protobuf::Message {
 public:
  stop_word();
  virtual ~stop_word();
  
  stop_word(const stop_word& from);
  
  inline stop_word& operator=(const stop_word& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const stop_word& default_instance();
  
  void Swap(stop_word* other);
  
  // implements Message ----------------------------------------------
  
  stop_word* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stop_word& from);
  void MergeFrom(const stop_word& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes word = 1;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 1;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const void* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  
  // optional int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  static inline int generate_keysign(const char * xdict_word, uint64_t *output) {
    char buffer[16*1024]; // 16K
    int ret = snprintf(buffer, sizeof(buffer), "%s", xdict_word);
    if (ret < 0 || ret >= (int)sizeof(buffer)) {
      return -1;
    }
    if (::xbuiltin::make_sign64(buffer, strlen(buffer), output) < 0) {
      return -1;
    }
    return 0;
  }
  int generate_keysign(uint64_t *output) {
    return generate_keysign(word().c_str(), output);
  }
  void clear_optionals() {
  }
  int load_tsl(char *&str) {
    // word
    char * xdict_word_value;
    if (::xbuiltin::xconvert(str, &xdict_word_value) < 0) {
      return -1;
    }
    set_word(xdict_word_value);
    // flag
    int32_t xdict_flag_value;
    if (::xbuiltin::xconvert(str, &xdict_flag_value) < 0) {
      return -1;
    }
    set_flag(xdict_flag_value);
    return 0;
  }
  // @@protoc_insertion_point(class_scope:ad.rtb.stop_word)
 private:
  inline void set_has_word();
  inline void clear_has_word();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* word_;
  ::google::protobuf::int32 flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stop_5fword_2eproto();
  friend void protobuf_AssignDesc_stop_5fword_2eproto();
  friend void protobuf_ShutdownFile_stop_5fword_2eproto();
  
  void InitAsDefaultInstance();
  static stop_word* default_instance_;
};
// ===================================================================


// ===================================================================

// stop_word

// required bytes word = 1;
inline bool stop_word::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stop_word::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stop_word::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stop_word::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& stop_word::word() const {
  return *word_;
}
inline void stop_word::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void stop_word::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void stop_word::set_word(const void* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stop_word::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* stop_word::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flag = 2;
inline bool stop_word::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stop_word::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stop_word::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stop_word::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 stop_word::flag() const {
  return flag_;
}
inline void stop_word::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stop_5fword_2eproto__INCLUDED
