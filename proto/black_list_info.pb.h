// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: black_list_info.proto

#ifndef PROTOBUF_black_5flist_5finfo_2eproto__INCLUDED
#define PROTOBUF_black_5flist_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "xbuiltin-options.pb.h"
#include <xbuiltin/Utils.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_black_5flist_5finfo_2eproto();
void protobuf_AssignDesc_black_5flist_5finfo_2eproto();
void protobuf_ShutdownFile_black_5flist_5finfo_2eproto();

class black_list_info;

// ===================================================================

class black_list_info : public ::google::protobuf::Message {
 public:
  black_list_info();
  virtual ~black_list_info();
  
  black_list_info(const black_list_info& from);
  
  inline black_list_info& operator=(const black_list_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const black_list_info& default_instance();
  
  void Swap(black_list_info* other);
  
  // implements Message ----------------------------------------------
  
  black_list_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const black_list_info& from);
  void MergeFrom(const black_list_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required bytes id_type = 2;
  inline bool has_id_type() const;
  inline void clear_id_type();
  static const int kIdTypeFieldNumber = 2;
  inline const ::std::string& id_type() const;
  inline void set_id_type(const ::std::string& value);
  inline void set_id_type(const char* value);
  inline void set_id_type(const void* value, size_t size);
  inline ::std::string* mutable_id_type();
  inline ::std::string* release_id_type();
  
  // required bytes id_value = 3;
  inline bool has_id_value() const;
  inline void clear_id_value();
  static const int kIdValueFieldNumber = 3;
  inline const ::std::string& id_value() const;
  inline void set_id_value(const ::std::string& value);
  inline void set_id_value(const char* value);
  inline void set_id_value(const void* value, size_t size);
  inline ::std::string* mutable_id_value();
  inline ::std::string* release_id_value();
  
  // required bytes cdate = 4;
  inline bool has_cdate() const;
  inline void clear_cdate();
  static const int kCdateFieldNumber = 4;
  inline const ::std::string& cdate() const;
  inline void set_cdate(const ::std::string& value);
  inline void set_cdate(const char* value);
  inline void set_cdate(const void* value, size_t size);
  inline ::std::string* mutable_cdate();
  inline ::std::string* release_cdate();
  
  // required bytes udate = 5;
  inline bool has_udate() const;
  inline void clear_udate();
  static const int kUdateFieldNumber = 5;
  inline const ::std::string& udate() const;
  inline void set_udate(const ::std::string& value);
  inline void set_udate(const char* value);
  inline void set_udate(const void* value, size_t size);
  inline ::std::string* mutable_udate();
  inline ::std::string* release_udate();
  
  static inline int generate_keysign(const char * xdict_id_value, uint64_t *output) {
    char buffer[16*1024]; // 16K
    int ret = snprintf(buffer, sizeof(buffer), "%s", xdict_id_value);
    if (ret < 0 || ret >= (int)sizeof(buffer)) {
      return -1;
    }
    if (::xbuiltin::make_sign64(buffer, strlen(buffer), output) < 0) {
      return -1;
    }
    return 0;
  }
  int generate_keysign(uint64_t *output) {
    return generate_keysign(id_value().c_str(), output);
  }
  void clear_optionals() {
  }
  int load_tsl(char *&str) {
    // id
    uint64_t xdict_id_value;
    if (::xbuiltin::xconvert(str, &xdict_id_value) < 0) {
      return -1;
    }
    set_id(xdict_id_value);
    // id_type
    char * xdict_id_type_value;
    if (::xbuiltin::xconvert(str, &xdict_id_type_value) < 0) {
      return -1;
    }
    set_id_type(xdict_id_type_value);
    // id_value
    char * xdict_id_value_value;
    if (::xbuiltin::xconvert(str, &xdict_id_value_value) < 0) {
      return -1;
    }
    set_id_value(xdict_id_value_value);
    // cdate
    char * xdict_cdate_value;
    if (::xbuiltin::xconvert(str, &xdict_cdate_value) < 0) {
      return -1;
    }
    set_cdate(xdict_cdate_value);
    // udate
    char * xdict_udate_value;
    if (::xbuiltin::xconvert(str, &xdict_udate_value) < 0) {
      return -1;
    }
    set_udate(xdict_udate_value);
    return 0;
  }
  // @@protoc_insertion_point(class_scope:ad.rtb.black_list_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_id_type();
  inline void clear_has_id_type();
  inline void set_has_id_value();
  inline void clear_has_id_value();
  inline void set_has_cdate();
  inline void clear_has_cdate();
  inline void set_has_udate();
  inline void clear_has_udate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::std::string* id_type_;
  ::std::string* id_value_;
  ::std::string* cdate_;
  ::std::string* udate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_black_5flist_5finfo_2eproto();
  friend void protobuf_AssignDesc_black_5flist_5finfo_2eproto();
  friend void protobuf_ShutdownFile_black_5flist_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static black_list_info* default_instance_;
};
// ===================================================================


// ===================================================================

// black_list_info

// required uint64 id = 1;
inline bool black_list_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void black_list_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void black_list_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void black_list_info::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 black_list_info::id() const {
  return id_;
}
inline void black_list_info::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required bytes id_type = 2;
inline bool black_list_info::has_id_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void black_list_info::set_has_id_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void black_list_info::clear_has_id_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void black_list_info::clear_id_type() {
  if (id_type_ != &::google::protobuf::internal::kEmptyString) {
    id_type_->clear();
  }
  clear_has_id_type();
}
inline const ::std::string& black_list_info::id_type() const {
  return *id_type_;
}
inline void black_list_info::set_id_type(const ::std::string& value) {
  set_has_id_type();
  if (id_type_ == &::google::protobuf::internal::kEmptyString) {
    id_type_ = new ::std::string;
  }
  id_type_->assign(value);
}
inline void black_list_info::set_id_type(const char* value) {
  set_has_id_type();
  if (id_type_ == &::google::protobuf::internal::kEmptyString) {
    id_type_ = new ::std::string;
  }
  id_type_->assign(value);
}
inline void black_list_info::set_id_type(const void* value, size_t size) {
  set_has_id_type();
  if (id_type_ == &::google::protobuf::internal::kEmptyString) {
    id_type_ = new ::std::string;
  }
  id_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* black_list_info::mutable_id_type() {
  set_has_id_type();
  if (id_type_ == &::google::protobuf::internal::kEmptyString) {
    id_type_ = new ::std::string;
  }
  return id_type_;
}
inline ::std::string* black_list_info::release_id_type() {
  clear_has_id_type();
  if (id_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_type_;
    id_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes id_value = 3;
inline bool black_list_info::has_id_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void black_list_info::set_has_id_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void black_list_info::clear_has_id_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void black_list_info::clear_id_value() {
  if (id_value_ != &::google::protobuf::internal::kEmptyString) {
    id_value_->clear();
  }
  clear_has_id_value();
}
inline const ::std::string& black_list_info::id_value() const {
  return *id_value_;
}
inline void black_list_info::set_id_value(const ::std::string& value) {
  set_has_id_value();
  if (id_value_ == &::google::protobuf::internal::kEmptyString) {
    id_value_ = new ::std::string;
  }
  id_value_->assign(value);
}
inline void black_list_info::set_id_value(const char* value) {
  set_has_id_value();
  if (id_value_ == &::google::protobuf::internal::kEmptyString) {
    id_value_ = new ::std::string;
  }
  id_value_->assign(value);
}
inline void black_list_info::set_id_value(const void* value, size_t size) {
  set_has_id_value();
  if (id_value_ == &::google::protobuf::internal::kEmptyString) {
    id_value_ = new ::std::string;
  }
  id_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* black_list_info::mutable_id_value() {
  set_has_id_value();
  if (id_value_ == &::google::protobuf::internal::kEmptyString) {
    id_value_ = new ::std::string;
  }
  return id_value_;
}
inline ::std::string* black_list_info::release_id_value() {
  clear_has_id_value();
  if (id_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_value_;
    id_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes cdate = 4;
inline bool black_list_info::has_cdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void black_list_info::set_has_cdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void black_list_info::clear_has_cdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void black_list_info::clear_cdate() {
  if (cdate_ != &::google::protobuf::internal::kEmptyString) {
    cdate_->clear();
  }
  clear_has_cdate();
}
inline const ::std::string& black_list_info::cdate() const {
  return *cdate_;
}
inline void black_list_info::set_cdate(const ::std::string& value) {
  set_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    cdate_ = new ::std::string;
  }
  cdate_->assign(value);
}
inline void black_list_info::set_cdate(const char* value) {
  set_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    cdate_ = new ::std::string;
  }
  cdate_->assign(value);
}
inline void black_list_info::set_cdate(const void* value, size_t size) {
  set_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    cdate_ = new ::std::string;
  }
  cdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* black_list_info::mutable_cdate() {
  set_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    cdate_ = new ::std::string;
  }
  return cdate_;
}
inline ::std::string* black_list_info::release_cdate() {
  clear_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cdate_;
    cdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes udate = 5;
inline bool black_list_info::has_udate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void black_list_info::set_has_udate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void black_list_info::clear_has_udate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void black_list_info::clear_udate() {
  if (udate_ != &::google::protobuf::internal::kEmptyString) {
    udate_->clear();
  }
  clear_has_udate();
}
inline const ::std::string& black_list_info::udate() const {
  return *udate_;
}
inline void black_list_info::set_udate(const ::std::string& value) {
  set_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    udate_ = new ::std::string;
  }
  udate_->assign(value);
}
inline void black_list_info::set_udate(const char* value) {
  set_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    udate_ = new ::std::string;
  }
  udate_->assign(value);
}
inline void black_list_info::set_udate(const void* value, size_t size) {
  set_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    udate_ = new ::std::string;
  }
  udate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* black_list_info::mutable_udate() {
  set_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    udate_ = new ::std::string;
  }
  return udate_;
}
inline ::std::string* black_list_info::release_udate() {
  clear_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = udate_;
    udate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_black_5flist_5finfo_2eproto__INCLUDED
