// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "phrase_business.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

namespace {

const ::google::protobuf::Descriptor* phrase_business_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phrase_business_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_phrase_5fbusiness_2eproto() {
  protobuf_AddDesc_phrase_5fbusiness_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "phrase_business.proto");
  GOOGLE_CHECK(file != NULL);
  phrase_business_descriptor_ = file->message_type(0);
  static const int phrase_business_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phrase_business, phrase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phrase_business, business_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phrase_business, weight_),
  };
  phrase_business_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phrase_business_descriptor_,
      phrase_business::default_instance_,
      phrase_business_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phrase_business, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phrase_business, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phrase_business));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_phrase_5fbusiness_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phrase_business_descriptor_, &phrase_business::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_phrase_5fbusiness_2eproto() {
  delete phrase_business::default_instance_;
  delete phrase_business_reflection_;
}

void protobuf_AddDesc_phrase_5fbusiness_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xbuiltin::protobuf_AddDesc_xbuiltin_2doptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025phrase_business.proto\022\006ad.rtb\032\026xbuilti"
    "n-options.proto\"N\n\017phrase_business\022\016\n\006ph"
    "rase\030\001 \002(\014\022\020\n\010business\030\002 \002(\014\022\016\n\006weight\030\003"
    " \002(\002:\t\322>\006phrase", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "phrase_business.proto", &protobuf_RegisterTypes);
  phrase_business::default_instance_ = new phrase_business();
  phrase_business::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_phrase_5fbusiness_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_phrase_5fbusiness_2eproto {
  StaticDescriptorInitializer_phrase_5fbusiness_2eproto() {
    protobuf_AddDesc_phrase_5fbusiness_2eproto();
  }
} static_descriptor_initializer_phrase_5fbusiness_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int phrase_business::kPhraseFieldNumber;
const int phrase_business::kBusinessFieldNumber;
const int phrase_business::kWeightFieldNumber;
#endif  // !_MSC_VER

phrase_business::phrase_business()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void phrase_business::InitAsDefaultInstance() {
}

phrase_business::phrase_business(const phrase_business& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void phrase_business::SharedCtor() {
  _cached_size_ = 0;
  phrase_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  business_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phrase_business::~phrase_business() {
  SharedDtor();
}

void phrase_business::SharedDtor() {
  if (phrase_ != &::google::protobuf::internal::kEmptyString) {
    delete phrase_;
  }
  if (business_ != &::google::protobuf::internal::kEmptyString) {
    delete business_;
  }
  if (this != default_instance_) {
  }
}

void phrase_business::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phrase_business::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phrase_business_descriptor_;
}

const phrase_business& phrase_business::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_phrase_5fbusiness_2eproto();  return *default_instance_;
}

phrase_business* phrase_business::default_instance_ = NULL;

phrase_business* phrase_business::New() const {
  return new phrase_business;
}

void phrase_business::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phrase()) {
      if (phrase_ != &::google::protobuf::internal::kEmptyString) {
        phrase_->clear();
      }
    }
    if (has_business()) {
      if (business_ != &::google::protobuf::internal::kEmptyString) {
        business_->clear();
      }
    }
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phrase_business::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes phrase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phrase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_business;
        break;
      }
      
      // required bytes business = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_business:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_business()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_weight;
        break;
      }
      
      // required float weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void phrase_business::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes phrase = 1;
  if (has_phrase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->phrase(), output);
  }
  
  // required bytes business = 2;
  if (has_business()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->business(), output);
  }
  
  // required float weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* phrase_business::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes phrase = 1;
  if (has_phrase()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->phrase(), target);
  }
  
  // required bytes business = 2;
  if (has_business()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->business(), target);
  }
  
  // required float weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int phrase_business::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes phrase = 1;
    if (has_phrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phrase());
    }
    
    // required bytes business = 2;
    if (has_business()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->business());
    }
    
    // required float weight = 3;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phrase_business::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phrase_business* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phrase_business*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phrase_business::MergeFrom(const phrase_business& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phrase()) {
      set_phrase(from.phrase());
    }
    if (from.has_business()) {
      set_business(from.business());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phrase_business::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phrase_business::CopyFrom(const phrase_business& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phrase_business::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void phrase_business::Swap(phrase_business* other) {
  if (other != this) {
    std::swap(phrase_, other->phrase_);
    std::swap(business_, other->business_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phrase_business::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phrase_business_descriptor_;
  metadata.reflection = phrase_business_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

// @@protoc_insertion_point(global_scope)
