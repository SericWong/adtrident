// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plan_info.proto

#ifndef PROTOBUF_plan_5finfo_2eproto__INCLUDED
#define PROTOBUF_plan_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "xbuiltin-options.pb.h"
#include <xbuiltin/Utils.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_plan_5finfo_2eproto();
void protobuf_AssignDesc_plan_5finfo_2eproto();
void protobuf_ShutdownFile_plan_5finfo_2eproto();

class plan_info;

// ===================================================================

class plan_info : public ::google::protobuf::Message {
 public:
  plan_info();
  virtual ~plan_info();
  
  plan_info(const plan_info& from);
  
  inline plan_info& operator=(const plan_info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const plan_info& default_instance();
  
  void Swap(plan_info* other);
  
  // implements Message ----------------------------------------------
  
  plan_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plan_info& from);
  void MergeFrom(const plan_info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint64 level() const;
  inline void set_level(::google::protobuf::uint64 value);
  
  // required uint64 planid = 2;
  inline bool has_planid() const;
  inline void clear_planid();
  static const int kPlanidFieldNumber = 2;
  inline ::google::protobuf::uint64 planid() const;
  inline void set_planid(::google::protobuf::uint64 value);
  
  // required uint64 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // required uint64 planstatid = 4;
  inline bool has_planstatid() const;
  inline void clear_planstatid();
  static const int kPlanstatidFieldNumber = 4;
  inline ::google::protobuf::uint64 planstatid() const;
  inline void set_planstatid(::google::protobuf::uint64 value);
  
  // optional bytes ipblack = 5;
  inline bool has_ipblack() const;
  inline void clear_ipblack();
  static const int kIpblackFieldNumber = 5;
  inline const ::std::string& ipblack() const;
  inline void set_ipblack(const ::std::string& value);
  inline void set_ipblack(const char* value);
  inline void set_ipblack(const void* value, size_t size);
  inline ::std::string* mutable_ipblack();
  inline ::std::string* release_ipblack();
  
  // optional bytes negative = 6;
  inline bool has_negative() const;
  inline void clear_negative();
  static const int kNegativeFieldNumber = 6;
  inline const ::std::string& negative() const;
  inline void set_negative(const ::std::string& value);
  inline void set_negative(const char* value);
  inline void set_negative(const void* value, size_t size);
  inline ::std::string* mutable_negative();
  inline ::std::string* release_negative();
  
  // optional bytes cyc = 7;
  inline bool has_cyc() const;
  inline void clear_cyc();
  static const int kCycFieldNumber = 7;
  inline const ::std::string& cyc() const;
  inline void set_cyc(const ::std::string& value);
  inline void set_cyc(const char* value);
  inline void set_cyc(const void* value, size_t size);
  inline ::std::string* mutable_cyc();
  inline ::std::string* release_cyc();
  
  // optional bytes region = 8;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 8;
  inline const ::std::string& region() const;
  inline void set_region(const ::std::string& value);
  inline void set_region(const char* value);
  inline void set_region(const void* value, size_t size);
  inline ::std::string* mutable_region();
  inline ::std::string* release_region();
  
  // optional uint64 budget = 9;
  inline bool has_budget() const;
  inline void clear_budget();
  static const int kBudgetFieldNumber = 9;
  inline ::google::protobuf::uint64 budget() const;
  inline void set_budget(::google::protobuf::uint64 value);
  
  // optional uint64 consume = 10;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 10;
  inline ::google::protobuf::uint64 consume() const;
  inline void set_consume(::google::protobuf::uint64 value);
  
  // optional uint64 gender = 11;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 11;
  inline ::google::protobuf::uint64 gender() const;
  inline void set_gender(::google::protobuf::uint64 value);
  
  // required bytes taste = 12;
  inline bool has_taste() const;
  inline void clear_taste();
  static const int kTasteFieldNumber = 12;
  inline const ::std::string& taste() const;
  inline void set_taste(const ::std::string& value);
  inline void set_taste(const char* value);
  inline void set_taste(const void* value, size_t size);
  inline ::std::string* mutable_taste();
  inline ::std::string* release_taste();
  
  // required bytes sitecate = 13;
  inline bool has_sitecate() const;
  inline void clear_sitecate();
  static const int kSitecateFieldNumber = 13;
  inline const ::std::string& sitecate() const;
  inline void set_sitecate(const ::std::string& value);
  inline void set_sitecate(const char* value);
  inline void set_sitecate(const void* value, size_t size);
  inline ::std::string* mutable_sitecate();
  inline ::std::string* release_sitecate();
  
  // required bytes exactnegative = 14;
  inline bool has_exactnegative() const;
  inline void clear_exactnegative();
  static const int kExactnegativeFieldNumber = 14;
  inline const ::std::string& exactnegative() const;
  inline void set_exactnegative(const ::std::string& value);
  inline void set_exactnegative(const char* value);
  inline void set_exactnegative(const void* value, size_t size);
  inline ::std::string* mutable_exactnegative();
  inline ::std::string* release_exactnegative();
  
  // required bytes flowtype = 15;
  inline bool has_flowtype() const;
  inline void clear_flowtype();
  static const int kFlowtypeFieldNumber = 15;
  inline const ::std::string& flowtype() const;
  inline void set_flowtype(const ::std::string& value);
  inline void set_flowtype(const char* value);
  inline void set_flowtype(const void* value, size_t size);
  inline ::std::string* mutable_flowtype();
  inline ::std::string* release_flowtype();
  
  // required bytes name = 16;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 16;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bytes cdate = 17;
  inline bool has_cdate() const;
  inline void clear_cdate();
  static const int kCdateFieldNumber = 17;
  inline const ::std::string& cdate() const;
  inline void set_cdate(const ::std::string& value);
  inline void set_cdate(const char* value);
  inline void set_cdate(const void* value, size_t size);
  inline ::std::string* mutable_cdate();
  inline ::std::string* release_cdate();
  
  // required bytes udate = 18;
  inline bool has_udate() const;
  inline void clear_udate();
  static const int kUdateFieldNumber = 18;
  inline const ::std::string& udate() const;
  inline void set_udate(const ::std::string& value);
  inline void set_udate(const char* value);
  inline void set_udate(const void* value, size_t size);
  inline ::std::string* mutable_udate();
  inline ::std::string* release_udate();
  
  static inline int generate_keysign(const uint64_t xdict_planid, uint64_t *output) {
    if (::xbuiltin::make_sign64(xdict_planid, output) < 0) {
      return -1;
    }
    return 0;
  }
  int generate_keysign(uint64_t *output) {
    return generate_keysign(planid(), output);
  }
  void clear_optionals() {
  }
  int load_tsl(char *&str) {
    // level
    uint64_t xdict_level_value;
    if (::xbuiltin::xconvert(str, &xdict_level_value) < 0) {
      return -1;
    }
    set_level(xdict_level_value);
    // planid
    uint64_t xdict_planid_value;
    if (::xbuiltin::xconvert(str, &xdict_planid_value) < 0) {
      return -1;
    }
    set_planid(xdict_planid_value);
    // userid
    uint64_t xdict_userid_value;
    if (::xbuiltin::xconvert(str, &xdict_userid_value) < 0) {
      return -1;
    }
    set_userid(xdict_userid_value);
    // planstatid
    uint64_t xdict_planstatid_value;
    if (::xbuiltin::xconvert(str, &xdict_planstatid_value) < 0) {
      return -1;
    }
    set_planstatid(xdict_planstatid_value);
    // ipblack
    char * xdict_ipblack_value;
    if (::xbuiltin::xconvert(str, &xdict_ipblack_value) < 0) {
      return -1;
    }
    set_ipblack(xdict_ipblack_value);
    // negative
    char * xdict_negative_value;
    if (::xbuiltin::xconvert(str, &xdict_negative_value) < 0) {
      return -1;
    }
    set_negative(xdict_negative_value);
    // cyc
    char * xdict_cyc_value;
    if (::xbuiltin::xconvert(str, &xdict_cyc_value) < 0) {
      return -1;
    }
    set_cyc(xdict_cyc_value);
    // region
    char * xdict_region_value;
    if (::xbuiltin::xconvert(str, &xdict_region_value) < 0) {
      return -1;
    }
    set_region(xdict_region_value);
    // budget
    uint64_t xdict_budget_value;
    if (::xbuiltin::xconvert(str, &xdict_budget_value) < 0) {
      return -1;
    }
    set_budget(xdict_budget_value);
    // consume
    uint64_t xdict_consume_value;
    if (::xbuiltin::xconvert(str, &xdict_consume_value) < 0) {
      return -1;
    }
    set_consume(xdict_consume_value);
    // gender
    uint64_t xdict_gender_value;
    if (::xbuiltin::xconvert(str, &xdict_gender_value) < 0) {
      return -1;
    }
    set_gender(xdict_gender_value);
    // taste
    char * xdict_taste_value;
    if (::xbuiltin::xconvert(str, &xdict_taste_value) < 0) {
      return -1;
    }
    set_taste(xdict_taste_value);
    // sitecate
    char * xdict_sitecate_value;
    if (::xbuiltin::xconvert(str, &xdict_sitecate_value) < 0) {
      return -1;
    }
    set_sitecate(xdict_sitecate_value);
    // exactnegative
    char * xdict_exactnegative_value;
    if (::xbuiltin::xconvert(str, &xdict_exactnegative_value) < 0) {
      return -1;
    }
    set_exactnegative(xdict_exactnegative_value);
    // flowtype
    char * xdict_flowtype_value;
    if (::xbuiltin::xconvert(str, &xdict_flowtype_value) < 0) {
      return -1;
    }
    set_flowtype(xdict_flowtype_value);
    // name
    char * xdict_name_value;
    if (::xbuiltin::xconvert(str, &xdict_name_value) < 0) {
      return -1;
    }
    set_name(xdict_name_value);
    // cdate
    char * xdict_cdate_value;
    if (::xbuiltin::xconvert(str, &xdict_cdate_value) < 0) {
      return -1;
    }
    set_cdate(xdict_cdate_value);
    // udate
    char * xdict_udate_value;
    if (::xbuiltin::xconvert(str, &xdict_udate_value) < 0) {
      return -1;
    }
    set_udate(xdict_udate_value);
    return 0;
  }
  // @@protoc_insertion_point(class_scope:ad.rtb.plan_info)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_planid();
  inline void clear_has_planid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_planstatid();
  inline void clear_has_planstatid();
  inline void set_has_ipblack();
  inline void clear_has_ipblack();
  inline void set_has_negative();
  inline void clear_has_negative();
  inline void set_has_cyc();
  inline void clear_has_cyc();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_budget();
  inline void clear_has_budget();
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_taste();
  inline void clear_has_taste();
  inline void set_has_sitecate();
  inline void clear_has_sitecate();
  inline void set_has_exactnegative();
  inline void clear_has_exactnegative();
  inline void set_has_flowtype();
  inline void clear_has_flowtype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cdate();
  inline void clear_has_cdate();
  inline void set_has_udate();
  inline void clear_has_udate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 level_;
  ::google::protobuf::uint64 planid_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint64 planstatid_;
  ::std::string* ipblack_;
  ::std::string* negative_;
  ::std::string* cyc_;
  ::std::string* region_;
  ::google::protobuf::uint64 budget_;
  ::google::protobuf::uint64 consume_;
  ::google::protobuf::uint64 gender_;
  ::std::string* taste_;
  ::std::string* sitecate_;
  ::std::string* exactnegative_;
  ::std::string* flowtype_;
  ::std::string* name_;
  ::std::string* cdate_;
  ::std::string* udate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_plan_5finfo_2eproto();
  friend void protobuf_AssignDesc_plan_5finfo_2eproto();
  friend void protobuf_ShutdownFile_plan_5finfo_2eproto();
  
  void InitAsDefaultInstance();
  static plan_info* default_instance_;
};
// ===================================================================


// ===================================================================

// plan_info

// optional uint64 level = 1;
inline bool plan_info::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plan_info::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plan_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plan_info::clear_level() {
  level_ = GOOGLE_ULONGLONG(0);
  clear_has_level();
}
inline ::google::protobuf::uint64 plan_info::level() const {
  return level_;
}
inline void plan_info::set_level(::google::protobuf::uint64 value) {
  set_has_level();
  level_ = value;
}

// required uint64 planid = 2;
inline bool plan_info::has_planid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plan_info::set_has_planid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plan_info::clear_has_planid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plan_info::clear_planid() {
  planid_ = GOOGLE_ULONGLONG(0);
  clear_has_planid();
}
inline ::google::protobuf::uint64 plan_info::planid() const {
  return planid_;
}
inline void plan_info::set_planid(::google::protobuf::uint64 value) {
  set_has_planid();
  planid_ = value;
}

// required uint64 userid = 3;
inline bool plan_info::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void plan_info::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void plan_info::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void plan_info::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 plan_info::userid() const {
  return userid_;
}
inline void plan_info::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// required uint64 planstatid = 4;
inline bool plan_info::has_planstatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void plan_info::set_has_planstatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void plan_info::clear_has_planstatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void plan_info::clear_planstatid() {
  planstatid_ = GOOGLE_ULONGLONG(0);
  clear_has_planstatid();
}
inline ::google::protobuf::uint64 plan_info::planstatid() const {
  return planstatid_;
}
inline void plan_info::set_planstatid(::google::protobuf::uint64 value) {
  set_has_planstatid();
  planstatid_ = value;
}

// optional bytes ipblack = 5;
inline bool plan_info::has_ipblack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void plan_info::set_has_ipblack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void plan_info::clear_has_ipblack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void plan_info::clear_ipblack() {
  if (ipblack_ != &::google::protobuf::internal::kEmptyString) {
    ipblack_->clear();
  }
  clear_has_ipblack();
}
inline const ::std::string& plan_info::ipblack() const {
  return *ipblack_;
}
inline void plan_info::set_ipblack(const ::std::string& value) {
  set_has_ipblack();
  if (ipblack_ == &::google::protobuf::internal::kEmptyString) {
    ipblack_ = new ::std::string;
  }
  ipblack_->assign(value);
}
inline void plan_info::set_ipblack(const char* value) {
  set_has_ipblack();
  if (ipblack_ == &::google::protobuf::internal::kEmptyString) {
    ipblack_ = new ::std::string;
  }
  ipblack_->assign(value);
}
inline void plan_info::set_ipblack(const void* value, size_t size) {
  set_has_ipblack();
  if (ipblack_ == &::google::protobuf::internal::kEmptyString) {
    ipblack_ = new ::std::string;
  }
  ipblack_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_ipblack() {
  set_has_ipblack();
  if (ipblack_ == &::google::protobuf::internal::kEmptyString) {
    ipblack_ = new ::std::string;
  }
  return ipblack_;
}
inline ::std::string* plan_info::release_ipblack() {
  clear_has_ipblack();
  if (ipblack_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipblack_;
    ipblack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes negative = 6;
inline bool plan_info::has_negative() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void plan_info::set_has_negative() {
  _has_bits_[0] |= 0x00000020u;
}
inline void plan_info::clear_has_negative() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void plan_info::clear_negative() {
  if (negative_ != &::google::protobuf::internal::kEmptyString) {
    negative_->clear();
  }
  clear_has_negative();
}
inline const ::std::string& plan_info::negative() const {
  return *negative_;
}
inline void plan_info::set_negative(const ::std::string& value) {
  set_has_negative();
  if (negative_ == &::google::protobuf::internal::kEmptyString) {
    negative_ = new ::std::string;
  }
  negative_->assign(value);
}
inline void plan_info::set_negative(const char* value) {
  set_has_negative();
  if (negative_ == &::google::protobuf::internal::kEmptyString) {
    negative_ = new ::std::string;
  }
  negative_->assign(value);
}
inline void plan_info::set_negative(const void* value, size_t size) {
  set_has_negative();
  if (negative_ == &::google::protobuf::internal::kEmptyString) {
    negative_ = new ::std::string;
  }
  negative_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_negative() {
  set_has_negative();
  if (negative_ == &::google::protobuf::internal::kEmptyString) {
    negative_ = new ::std::string;
  }
  return negative_;
}
inline ::std::string* plan_info::release_negative() {
  clear_has_negative();
  if (negative_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = negative_;
    negative_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes cyc = 7;
inline bool plan_info::has_cyc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void plan_info::set_has_cyc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void plan_info::clear_has_cyc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void plan_info::clear_cyc() {
  if (cyc_ != &::google::protobuf::internal::kEmptyString) {
    cyc_->clear();
  }
  clear_has_cyc();
}
inline const ::std::string& plan_info::cyc() const {
  return *cyc_;
}
inline void plan_info::set_cyc(const ::std::string& value) {
  set_has_cyc();
  if (cyc_ == &::google::protobuf::internal::kEmptyString) {
    cyc_ = new ::std::string;
  }
  cyc_->assign(value);
}
inline void plan_info::set_cyc(const char* value) {
  set_has_cyc();
  if (cyc_ == &::google::protobuf::internal::kEmptyString) {
    cyc_ = new ::std::string;
  }
  cyc_->assign(value);
}
inline void plan_info::set_cyc(const void* value, size_t size) {
  set_has_cyc();
  if (cyc_ == &::google::protobuf::internal::kEmptyString) {
    cyc_ = new ::std::string;
  }
  cyc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_cyc() {
  set_has_cyc();
  if (cyc_ == &::google::protobuf::internal::kEmptyString) {
    cyc_ = new ::std::string;
  }
  return cyc_;
}
inline ::std::string* plan_info::release_cyc() {
  clear_has_cyc();
  if (cyc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cyc_;
    cyc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes region = 8;
inline bool plan_info::has_region() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void plan_info::set_has_region() {
  _has_bits_[0] |= 0x00000080u;
}
inline void plan_info::clear_has_region() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void plan_info::clear_region() {
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    region_->clear();
  }
  clear_has_region();
}
inline const ::std::string& plan_info::region() const {
  return *region_;
}
inline void plan_info::set_region(const ::std::string& value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(value);
}
inline void plan_info::set_region(const char* value) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(value);
}
inline void plan_info::set_region(const void* value, size_t size) {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  region_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_region() {
  set_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    region_ = new ::std::string;
  }
  return region_;
}
inline ::std::string* plan_info::release_region() {
  clear_has_region();
  if (region_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = region_;
    region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 budget = 9;
inline bool plan_info::has_budget() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void plan_info::set_has_budget() {
  _has_bits_[0] |= 0x00000100u;
}
inline void plan_info::clear_has_budget() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void plan_info::clear_budget() {
  budget_ = GOOGLE_ULONGLONG(0);
  clear_has_budget();
}
inline ::google::protobuf::uint64 plan_info::budget() const {
  return budget_;
}
inline void plan_info::set_budget(::google::protobuf::uint64 value) {
  set_has_budget();
  budget_ = value;
}

// optional uint64 consume = 10;
inline bool plan_info::has_consume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void plan_info::set_has_consume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void plan_info::clear_has_consume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void plan_info::clear_consume() {
  consume_ = GOOGLE_ULONGLONG(0);
  clear_has_consume();
}
inline ::google::protobuf::uint64 plan_info::consume() const {
  return consume_;
}
inline void plan_info::set_consume(::google::protobuf::uint64 value) {
  set_has_consume();
  consume_ = value;
}

// optional uint64 gender = 11;
inline bool plan_info::has_gender() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void plan_info::set_has_gender() {
  _has_bits_[0] |= 0x00000400u;
}
inline void plan_info::clear_has_gender() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void plan_info::clear_gender() {
  gender_ = GOOGLE_ULONGLONG(0);
  clear_has_gender();
}
inline ::google::protobuf::uint64 plan_info::gender() const {
  return gender_;
}
inline void plan_info::set_gender(::google::protobuf::uint64 value) {
  set_has_gender();
  gender_ = value;
}

// required bytes taste = 12;
inline bool plan_info::has_taste() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void plan_info::set_has_taste() {
  _has_bits_[0] |= 0x00000800u;
}
inline void plan_info::clear_has_taste() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void plan_info::clear_taste() {
  if (taste_ != &::google::protobuf::internal::kEmptyString) {
    taste_->clear();
  }
  clear_has_taste();
}
inline const ::std::string& plan_info::taste() const {
  return *taste_;
}
inline void plan_info::set_taste(const ::std::string& value) {
  set_has_taste();
  if (taste_ == &::google::protobuf::internal::kEmptyString) {
    taste_ = new ::std::string;
  }
  taste_->assign(value);
}
inline void plan_info::set_taste(const char* value) {
  set_has_taste();
  if (taste_ == &::google::protobuf::internal::kEmptyString) {
    taste_ = new ::std::string;
  }
  taste_->assign(value);
}
inline void plan_info::set_taste(const void* value, size_t size) {
  set_has_taste();
  if (taste_ == &::google::protobuf::internal::kEmptyString) {
    taste_ = new ::std::string;
  }
  taste_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_taste() {
  set_has_taste();
  if (taste_ == &::google::protobuf::internal::kEmptyString) {
    taste_ = new ::std::string;
  }
  return taste_;
}
inline ::std::string* plan_info::release_taste() {
  clear_has_taste();
  if (taste_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taste_;
    taste_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes sitecate = 13;
inline bool plan_info::has_sitecate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void plan_info::set_has_sitecate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void plan_info::clear_has_sitecate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void plan_info::clear_sitecate() {
  if (sitecate_ != &::google::protobuf::internal::kEmptyString) {
    sitecate_->clear();
  }
  clear_has_sitecate();
}
inline const ::std::string& plan_info::sitecate() const {
  return *sitecate_;
}
inline void plan_info::set_sitecate(const ::std::string& value) {
  set_has_sitecate();
  if (sitecate_ == &::google::protobuf::internal::kEmptyString) {
    sitecate_ = new ::std::string;
  }
  sitecate_->assign(value);
}
inline void plan_info::set_sitecate(const char* value) {
  set_has_sitecate();
  if (sitecate_ == &::google::protobuf::internal::kEmptyString) {
    sitecate_ = new ::std::string;
  }
  sitecate_->assign(value);
}
inline void plan_info::set_sitecate(const void* value, size_t size) {
  set_has_sitecate();
  if (sitecate_ == &::google::protobuf::internal::kEmptyString) {
    sitecate_ = new ::std::string;
  }
  sitecate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_sitecate() {
  set_has_sitecate();
  if (sitecate_ == &::google::protobuf::internal::kEmptyString) {
    sitecate_ = new ::std::string;
  }
  return sitecate_;
}
inline ::std::string* plan_info::release_sitecate() {
  clear_has_sitecate();
  if (sitecate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sitecate_;
    sitecate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes exactnegative = 14;
inline bool plan_info::has_exactnegative() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void plan_info::set_has_exactnegative() {
  _has_bits_[0] |= 0x00002000u;
}
inline void plan_info::clear_has_exactnegative() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void plan_info::clear_exactnegative() {
  if (exactnegative_ != &::google::protobuf::internal::kEmptyString) {
    exactnegative_->clear();
  }
  clear_has_exactnegative();
}
inline const ::std::string& plan_info::exactnegative() const {
  return *exactnegative_;
}
inline void plan_info::set_exactnegative(const ::std::string& value) {
  set_has_exactnegative();
  if (exactnegative_ == &::google::protobuf::internal::kEmptyString) {
    exactnegative_ = new ::std::string;
  }
  exactnegative_->assign(value);
}
inline void plan_info::set_exactnegative(const char* value) {
  set_has_exactnegative();
  if (exactnegative_ == &::google::protobuf::internal::kEmptyString) {
    exactnegative_ = new ::std::string;
  }
  exactnegative_->assign(value);
}
inline void plan_info::set_exactnegative(const void* value, size_t size) {
  set_has_exactnegative();
  if (exactnegative_ == &::google::protobuf::internal::kEmptyString) {
    exactnegative_ = new ::std::string;
  }
  exactnegative_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_exactnegative() {
  set_has_exactnegative();
  if (exactnegative_ == &::google::protobuf::internal::kEmptyString) {
    exactnegative_ = new ::std::string;
  }
  return exactnegative_;
}
inline ::std::string* plan_info::release_exactnegative() {
  clear_has_exactnegative();
  if (exactnegative_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exactnegative_;
    exactnegative_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes flowtype = 15;
inline bool plan_info::has_flowtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void plan_info::set_has_flowtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void plan_info::clear_has_flowtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void plan_info::clear_flowtype() {
  if (flowtype_ != &::google::protobuf::internal::kEmptyString) {
    flowtype_->clear();
  }
  clear_has_flowtype();
}
inline const ::std::string& plan_info::flowtype() const {
  return *flowtype_;
}
inline void plan_info::set_flowtype(const ::std::string& value) {
  set_has_flowtype();
  if (flowtype_ == &::google::protobuf::internal::kEmptyString) {
    flowtype_ = new ::std::string;
  }
  flowtype_->assign(value);
}
inline void plan_info::set_flowtype(const char* value) {
  set_has_flowtype();
  if (flowtype_ == &::google::protobuf::internal::kEmptyString) {
    flowtype_ = new ::std::string;
  }
  flowtype_->assign(value);
}
inline void plan_info::set_flowtype(const void* value, size_t size) {
  set_has_flowtype();
  if (flowtype_ == &::google::protobuf::internal::kEmptyString) {
    flowtype_ = new ::std::string;
  }
  flowtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_flowtype() {
  set_has_flowtype();
  if (flowtype_ == &::google::protobuf::internal::kEmptyString) {
    flowtype_ = new ::std::string;
  }
  return flowtype_;
}
inline ::std::string* plan_info::release_flowtype() {
  clear_has_flowtype();
  if (flowtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flowtype_;
    flowtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes name = 16;
inline bool plan_info::has_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void plan_info::set_has_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void plan_info::clear_has_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void plan_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& plan_info::name() const {
  return *name_;
}
inline void plan_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void plan_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void plan_info::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* plan_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes cdate = 17;
inline bool plan_info::has_cdate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void plan_info::set_has_cdate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void plan_info::clear_has_cdate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void plan_info::clear_cdate() {
  if (cdate_ != &::google::protobuf::internal::kEmptyString) {
    cdate_->clear();
  }
  clear_has_cdate();
}
inline const ::std::string& plan_info::cdate() const {
  return *cdate_;
}
inline void plan_info::set_cdate(const ::std::string& value) {
  set_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    cdate_ = new ::std::string;
  }
  cdate_->assign(value);
}
inline void plan_info::set_cdate(const char* value) {
  set_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    cdate_ = new ::std::string;
  }
  cdate_->assign(value);
}
inline void plan_info::set_cdate(const void* value, size_t size) {
  set_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    cdate_ = new ::std::string;
  }
  cdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_cdate() {
  set_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    cdate_ = new ::std::string;
  }
  return cdate_;
}
inline ::std::string* plan_info::release_cdate() {
  clear_has_cdate();
  if (cdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cdate_;
    cdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes udate = 18;
inline bool plan_info::has_udate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void plan_info::set_has_udate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void plan_info::clear_has_udate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void plan_info::clear_udate() {
  if (udate_ != &::google::protobuf::internal::kEmptyString) {
    udate_->clear();
  }
  clear_has_udate();
}
inline const ::std::string& plan_info::udate() const {
  return *udate_;
}
inline void plan_info::set_udate(const ::std::string& value) {
  set_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    udate_ = new ::std::string;
  }
  udate_->assign(value);
}
inline void plan_info::set_udate(const char* value) {
  set_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    udate_ = new ::std::string;
  }
  udate_->assign(value);
}
inline void plan_info::set_udate(const void* value, size_t size) {
  set_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    udate_ = new ::std::string;
  }
  udate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* plan_info::mutable_udate() {
  set_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    udate_ = new ::std::string;
  }
  return udate_;
}
inline ::std::string* plan_info::release_udate() {
  clear_has_udate();
  if (udate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = udate_;
    udate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_plan_5finfo_2eproto__INCLUDED
