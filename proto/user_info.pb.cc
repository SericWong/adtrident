// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ad {
namespace rtb {

namespace {

const ::google::protobuf::Descriptor* user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5finfo_2eproto() {
  protobuf_AddDesc_user_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_info.proto");
  GOOGLE_CHECK(file != NULL);
  user_info_descriptor_ = file->message_type(0);
  static const int user_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, ustatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, ipblack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, budget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, budget_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, consume_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, cdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, udate_),
  };
  user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_info_descriptor_,
      user_info::default_instance_,
      user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_info_descriptor_, &user_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5finfo_2eproto() {
  delete user_info::default_instance_;
  delete user_info_reflection_;
}

void protobuf_AddDesc_user_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::xbuiltin::protobuf_AddDesc_xbuiltin_2doptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017user_info.proto\022\006ad.rtb\032\026xbuiltin-opti"
    "ons.proto\"\335\001\n\tuser_info\022\r\n\005level\030\001 \001(\004\022\016"
    "\n\006userid\030\002 \002(\004\022\017\n\007ustatid\030\003 \002(\004\022\017\n\007ipbla"
    "ck\030\004 \002(\014\022\016\n\006region\030\005 \002(\014\022\016\n\006budget\030\006 \002(\004"
    "\022\022\n\nbudget_all\030\007 \002(\004\022\017\n\007consume\030\010 \002(\004\022\023\n"
    "\013consume_all\030\t \002(\004\022\014\n\004name\030\n \002(\014\022\r\n\005cdat"
    "e\030\013 \002(\014\022\r\n\005udate\030\014 \002(\014:\t\322>\006userid", 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_info.proto", &protobuf_RegisterTypes);
  user_info::default_instance_ = new user_info();
  user_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5finfo_2eproto {
  StaticDescriptorInitializer_user_5finfo_2eproto() {
    protobuf_AddDesc_user_5finfo_2eproto();
  }
} static_descriptor_initializer_user_5finfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int user_info::kLevelFieldNumber;
const int user_info::kUseridFieldNumber;
const int user_info::kUstatidFieldNumber;
const int user_info::kIpblackFieldNumber;
const int user_info::kRegionFieldNumber;
const int user_info::kBudgetFieldNumber;
const int user_info::kBudgetAllFieldNumber;
const int user_info::kConsumeFieldNumber;
const int user_info::kConsumeAllFieldNumber;
const int user_info::kNameFieldNumber;
const int user_info::kCdateFieldNumber;
const int user_info::kUdateFieldNumber;
#endif  // !_MSC_VER

user_info::user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_info::InitAsDefaultInstance() {
}

user_info::user_info(const user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_info::SharedCtor() {
  _cached_size_ = 0;
  level_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  ustatid_ = GOOGLE_ULONGLONG(0);
  ipblack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  budget_ = GOOGLE_ULONGLONG(0);
  budget_all_ = GOOGLE_ULONGLONG(0);
  consume_ = GOOGLE_ULONGLONG(0);
  consume_all_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_info::~user_info() {
  SharedDtor();
}

void user_info::SharedDtor() {
  if (ipblack_ != &::google::protobuf::internal::kEmptyString) {
    delete ipblack_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (cdate_ != &::google::protobuf::internal::kEmptyString) {
    delete cdate_;
  }
  if (udate_ != &::google::protobuf::internal::kEmptyString) {
    delete udate_;
  }
  if (this != default_instance_) {
  }
}

void user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_info_descriptor_;
}

const user_info& user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5finfo_2eproto();  return *default_instance_;
}

user_info* user_info::default_instance_ = NULL;

user_info* user_info::New() const {
  return new user_info;
}

void user_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = GOOGLE_ULONGLONG(0);
    userid_ = GOOGLE_ULONGLONG(0);
    ustatid_ = GOOGLE_ULONGLONG(0);
    if (has_ipblack()) {
      if (ipblack_ != &::google::protobuf::internal::kEmptyString) {
        ipblack_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
    budget_ = GOOGLE_ULONGLONG(0);
    budget_all_ = GOOGLE_ULONGLONG(0);
    consume_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    consume_all_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_cdate()) {
      if (cdate_ != &::google::protobuf::internal::kEmptyString) {
        cdate_->clear();
      }
    }
    if (has_udate()) {
      if (udate_ != &::google::protobuf::internal::kEmptyString) {
        udate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required uint64 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ustatid;
        break;
      }
      
      // required uint64 ustatid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ustatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ustatid_)));
          set_has_ustatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ipblack;
        break;
      }
      
      // required bytes ipblack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipblack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipblack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_region;
        break;
      }
      
      // required bytes region = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_budget;
        break;
      }
      
      // required uint64 budget = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_budget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &budget_)));
          set_has_budget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_budget_all;
        break;
      }
      
      // required uint64 budget_all = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_budget_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &budget_all_)));
          set_has_budget_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_consume;
        break;
      }
      
      // required uint64 consume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_consume_all;
        break;
      }
      
      // required uint64 consume_all = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &consume_all_)));
          set_has_consume_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }
      
      // required bytes name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_cdate;
        break;
      }
      
      // required bytes cdate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_udate;
        break;
      }
      
      // required bytes udate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_udate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->level(), output);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required uint64 ustatid = 3;
  if (has_ustatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ustatid(), output);
  }
  
  // required bytes ipblack = 4;
  if (has_ipblack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ipblack(), output);
  }
  
  // required bytes region = 5;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->region(), output);
  }
  
  // required uint64 budget = 6;
  if (has_budget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->budget(), output);
  }
  
  // required uint64 budget_all = 7;
  if (has_budget_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->budget_all(), output);
  }
  
  // required uint64 consume = 8;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->consume(), output);
  }
  
  // required uint64 consume_all = 9;
  if (has_consume_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->consume_all(), output);
  }
  
  // required bytes name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->name(), output);
  }
  
  // required bytes cdate = 11;
  if (has_cdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->cdate(), output);
  }
  
  // required bytes udate = 12;
  if (has_udate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->udate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->level(), target);
  }
  
  // required uint64 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required uint64 ustatid = 3;
  if (has_ustatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ustatid(), target);
  }
  
  // required bytes ipblack = 4;
  if (has_ipblack()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ipblack(), target);
  }
  
  // required bytes region = 5;
  if (has_region()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->region(), target);
  }
  
  // required uint64 budget = 6;
  if (has_budget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->budget(), target);
  }
  
  // required uint64 budget_all = 7;
  if (has_budget_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->budget_all(), target);
  }
  
  // required uint64 consume = 8;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->consume(), target);
  }
  
  // required uint64 consume_all = 9;
  if (has_consume_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->consume_all(), target);
  }
  
  // required bytes name = 10;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->name(), target);
  }
  
  // required bytes cdate = 11;
  if (has_cdate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->cdate(), target);
  }
  
  // required bytes udate = 12;
  if (has_udate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->udate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->level());
    }
    
    // required uint64 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required uint64 ustatid = 3;
    if (has_ustatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ustatid());
    }
    
    // required bytes ipblack = 4;
    if (has_ipblack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ipblack());
    }
    
    // required bytes region = 5;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->region());
    }
    
    // required uint64 budget = 6;
    if (has_budget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->budget());
    }
    
    // required uint64 budget_all = 7;
    if (has_budget_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->budget_all());
    }
    
    // required uint64 consume = 8;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->consume());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 consume_all = 9;
    if (has_consume_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->consume_all());
    }
    
    // required bytes name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required bytes cdate = 11;
    if (has_cdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cdate());
    }
    
    // required bytes udate = 12;
    if (has_udate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->udate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_info::MergeFrom(const user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_ustatid()) {
      set_ustatid(from.ustatid());
    }
    if (from.has_ipblack()) {
      set_ipblack(from.ipblack());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_budget()) {
      set_budget(from.budget());
    }
    if (from.has_budget_all()) {
      set_budget_all(from.budget_all());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_consume_all()) {
      set_consume_all(from.consume_all());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cdate()) {
      set_cdate(from.cdate());
    }
    if (from.has_udate()) {
      set_udate(from.udate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info::CopyFrom(const user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000ffe) != 0x00000ffe) return false;
  
  return true;
}

void user_info::Swap(user_info* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(userid_, other->userid_);
    std::swap(ustatid_, other->ustatid_);
    std::swap(ipblack_, other->ipblack_);
    std::swap(region_, other->region_);
    std::swap(budget_, other->budget_);
    std::swap(budget_all_, other->budget_all_);
    std::swap(consume_, other->consume_);
    std::swap(consume_all_, other->consume_all_);
    std::swap(name_, other->name_);
    std::swap(cdate_, other->cdate_);
    std::swap(udate_, other->udate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_info_descriptor_;
  metadata.reflection = user_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtb
}  // namespace ad

// @@protoc_insertion_point(global_scope)
